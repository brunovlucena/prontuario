# ============================================================================
# Configuração Alta Disponibilidade para Plataforma Prontuário Médico
# Dual Mac Studio M3 Ultra + Fallback Emergência GCP
# ============================================================================

# Configuração HAProxy Load Balancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-ha-config
  namespace: medical-ha
  labels:
    app: medical-platform
    component: load-balancer
    tier: infrastructure
data:
  haproxy.cfg: |
    global
        daemon
        log stdout local0 info
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        
    defaults
        mode http
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms
        timeout http-request 10s
        timeout http-keep-alive 2s
        timeout check 2s
        option httplog
        option dontlognull
        option http-server-close
        option forwardfor except 127.0.0.0/8
        option redispatch
        retries 3
        
    # Endpoint verificação saúde
    listen health_check
        bind *:8080
        mode http
        http-request return status 200 content-type text/plain string "HA-PROXY-OK"
        
    # Endpoint estatísticas (apenas interno)
    listen stats
        bind *:8404
        stats enable
        stats uri /stats
        stats refresh 30s
        stats hide-version
        stats realm HAProxy\ Statistics
        stats auth admin:senha_admin_segura
        
    # Frontend principal - terminação SSL
    frontend medical_frontend
        bind *:80
        bind *:443 ssl crt /etc/ssl/certs/medical-platform.pem
        
        # Redirecionamento forçado HTTPS
        redirect scheme https if !{ ssl_fc }
        
        # Headers segurança
        http-response set-header X-Frame-Options SAMEORIGIN
        http-response set-header X-Content-Type-Options nosniff
        http-response set-header X-XSS-Protection "1; mode=block"
        http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
        
        # Balanceamento baseado em path
        use_backend medical_api_servers if { path_beg /api/ }
        use_backend medical_static_servers if { path_beg /static/ }
        default_backend medical_api_servers
        
    # Backend servidores API médica
    backend medical_api_servers
        balance roundrobin
        option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
        http-check expect status 200
        
        # Mac Studio primário (peso maior)
        server mac-studio-primary 192.168.100.10:8000 check inter 5s rise 2 fall 3 weight 100
        
        # Mac Studio secundário (backup)
        server mac-studio-secondary 192.168.100.11:8000 check inter 5s rise 2 fall 3 weight 50 backup
        
        # Fallback GCP emergência (último recurso)
        server gcp-emergency gcp-emergency.medical-platform.com:80 check inter 10s rise 3 fall 2 weight 25 backup
        
    # Backend conteúdo estático
    backend medical_static_servers
        balance static-rr
        option httpchk GET /health-static HTTP/1.1\r\nHost:\ localhost
        
        server static-primary 192.168.100.10:8001 check inter 10s
        server static-secondary 192.168.100.11:8001 check inter 10s backup

---
# Configuração PostgreSQL Alta Disponibilidade
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-ha-config
  namespace: medical-ha
  labels:
    app: medical-platform
    component: database
    tier: data
data:
  postgresql.conf: |
    # Configuração replicação streaming
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_segments = 32
    hot_standby = on
    hot_standby_feedback = on
    
    # Performance otimizada para Mac Studio M3 Ultra
    shared_buffers = 32GB
    effective_cache_size = 384GB
    work_mem = 256MB
    maintenance_work_mem = 2GB
    
    # Configuração logging
    log_destination = 'csvlog'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_statement = 'mod'
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    
    # Checkpoint configuração
    checkpoint_segments = 64
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    
    # Conexões
    max_connections = 200
    superuser_reserved_connections = 3
    
  pg_hba.conf: |
    # Configuração autenticação
    local   all             postgres                                peer
    local   all             all                                     md5
    
    # Conexões locais
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    
    # Rede hospital
    host    all             all             192.168.100.0/24        md5
    
    # Replicação
    host    replication     replicator      192.168.100.10/32       md5
    host    replication     replicator      192.168.100.11/32       md5
    
  recovery.conf: |
    # Configuração standby (secundário)
    standby_mode = 'on'
    primary_conninfo = 'host=192.168.100.10 port=5432 user=replicator application_name=secondary'
    trigger_file = '/opt/medical-ai/promote_trigger'
    restore_command = 'cp /opt/medical-ai/wal_archive/%f %p'
    archive_cleanup_command = 'pg_archivecleanup /opt/medical-ai/wal_archive %r'

---
# Configuração Redis Cluster
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-ha-config
  namespace: medical-ha
  labels:
    app: medical-platform
    component: cache
    tier: data
data:
  redis.conf: |
    # Configuração básica Redis
    bind 0.0.0.0
    port 6379
    protected-mode yes
    requirepass senha_redis_segura
    
    # Persistência
    save 900 1
    save 300 10
    save 60 10000
    dbfilename dump.rdb
    dir /opt/redis/data
    
    # Replicação
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    
    # Logging
    loglevel notice
    logfile /opt/redis/logs/redis-server.log
    
    # Memória
    maxmemory 16gb
    maxmemory-policy allkeys-lru
    
    # Configuração cluster
    cluster-enabled yes
    cluster-config-file nodes-6379.conf
    cluster-node-timeout 15000
    cluster-replica-validity-factor 10
    cluster-migration-barrier 1
    cluster-require-full-coverage yes

---
# Serviço HAProxy
apiVersion: v1
kind: Service
metadata:
  name: haproxy-load-balancer
  namespace: medical-ha
  labels:
    app: medical-platform
    component: load-balancer
spec:
  selector:
    app: haproxy
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: stats
    port: 8404
    targetPort: 8404
    protocol: TCP
  type: LoadBalancer
  loadBalancerIP: 192.168.100.100

---
# Deployment HAProxy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy-deployment
  namespace: medical-ha
  labels:
    app: medical-platform
    component: load-balancer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      containers:
      - name: haproxy
        image: haproxy:2.8-alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 8080
        - containerPort: 8404
        volumeMounts:
        - name: haproxy-config
          mountPath: /usr/local/etc/haproxy/haproxy.cfg
          subPath: haproxy.cfg
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: haproxy-config
        configMap:
          name: haproxy-ha-config
      - name: ssl-certs
        secret:
          secretName: medical-platform-tls

---
# Monitoramento Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-ha-config
  namespace: medical-ha
  labels:
    app: medical-platform
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      
    rule_files:
      - "/etc/prometheus/rules/*.yml"
      
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
              
    scrape_configs:
      # Mac Studio primário
      - job_name: 'mac-studio-primary'
        static_configs:
          - targets: ['192.168.100.10:9100']
        scrape_interval: 5s
        metrics_path: /metrics
        
      # Mac Studio secundário  
      - job_name: 'mac-studio-secondary'
        static_configs:
          - targets: ['192.168.100.11:9100']
        scrape_interval: 5s
        metrics_path: /metrics
        
      # HAProxy stats
      - job_name: 'haproxy'
        static_configs:
          - targets: ['192.168.100.100:8404']
        scrape_interval: 10s
        metrics_path: /stats;csv
        
      # API médica primária
      - job_name: 'medical-api-primary'
        static_configs:
          - targets: ['192.168.100.10:8000']
        scrape_interval: 5s
        metrics_path: /metrics
        scheme: https
        tls_config:
          insecure_skip_verify: true
          
      # API médica secundária
      - job_name: 'medical-api-secondary'
        static_configs:
          - targets: ['192.168.100.11:8000']
        scrape_interval: 5s
        metrics_path: /metrics
        scheme: https
        tls_config:
          insecure_skip_verify: true
          
      # PostgreSQL primário
      - job_name: 'postgres-primary'
        static_configs:
          - targets: ['192.168.100.10:9187']
        scrape_interval: 10s
        
      # PostgreSQL secundário
      - job_name: 'postgres-secondary'
        static_configs:
          - targets: ['192.168.100.11:9187']
        scrape_interval: 10s
        
      # Redis primário
      - job_name: 'redis-primary'
        static_configs:
          - targets: ['192.168.100.10:9121']
        scrape_interval: 10s
        
      # Redis secundário
      - job_name: 'redis-secondary'
        static_configs:
          - targets: ['192.168.100.11:9121']
        scrape_interval: 10s

---
# Regras alertas médicos críticos
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-medical-rules
  namespace: medical-ha
  labels:
    app: medical-platform
    component: monitoring
data:
  medical-alerts.yml: |
    groups:
    - name: medical_critical_alerts
      rules:
      # Sistema crítico inoperante
      - alert: MacStudioDown
        expr: up == 0
        for: 30s
        labels:
          severity: critical
          impact: patient_care
        annotations:
          summary: "Mac Studio {{ $labels.instance }} inoperante"
          description: "Mac Studio {{ $labels.instance }} não responsivo há {{ $value }}s - impacto atendimento paciente"
          runbook_url: "https://docs.medical-platform.com/runbooks/mac-studio-down"
          
      # Failover ativado
      - alert: FailoverActivated
        expr: haproxy_server_status{server="mac-studio-secondary"} == 1 and haproxy_server_status{server="mac-studio-primary"} == 0
        for: 1m
        labels:
          severity: critical
          impact: system_architecture
        annotations:
          summary: "Failover automático ativado - sistema secundário em uso"
          description: "Sistema secundário assumiu operações após falha primário"
          
      # Lag replicação crítico
      - alert: DatabaseReplicationLag
        expr: pg_replication_lag_seconds > 10
        for: 2m
        labels:
          severity: critical
          impact: data_consistency
        annotations:
          summary: "Lag replicação database crítico: {{ $value }}s"
          description: "Replicação PostgreSQL com atraso {{ $value }}s - risco inconsistência dados"
          
      # Uso memória crítico
      - alert: MemoryUsageCritical
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 95
        for: 5m
        labels:
          severity: critical
          impact: system_performance
        annotations:
          summary: "Uso memória crítico {{ $labels.instance }}: {{ $value }}%"
          description: "Uso memória {{ $value }}% por mais de 5 minutos"
          
      # Espaço disco crítico
      - alert: DiskSpaceCritical
        expr: (1 - (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"})) * 100 > 90
        for: 3m
        labels:
          severity: critical
          impact: system_stability
        annotations:
          summary: "Espaço disco crítico {{ $labels.instance }}: {{ $value }}%"
          description: "Espaço disco {{ $value }}% - risco falha sistema"
          
      # API médica inoperante
      - alert: MedicalAPIDown
        expr: up{job=~"medical-api.*"} == 0
        for: 1m
        labels:
          severity: critical
          impact: patient_care
        annotations:
          summary: "API médica inoperante {{ $labels.instance }}"
          description: "API médica não responsiva - impossível atendimento pacientes"
          
      # Falha certificado SSL
      - alert: SSLCertificateExpiring
        expr: ssl_certificate_expiry_seconds < 604800  # 7 dias
        for: 1h
        labels:
          severity: warning
          impact: system_access
        annotations:
          summary: "Certificado SSL expira em {{ $value | humanizeDuration }}"
          description: "Certificado SSL {{ $labels.instance }} expira em breve"

---
# Política rede segurança
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: medical-ha-network-policy
  namespace: medical-ha
spec:
  podSelector:
    matchLabels:
      app: medical-platform
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: medical-production
    - podSelector:
        matchLabels:
          app: medical-platform
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: medical-data
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: medical-cache
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Permitir DNS
    ports:
    - protocol: UDP
      port: 53 